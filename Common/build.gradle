plugins {
    id 'java'
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = "${mod_name}-common-${minecraft_version}"

minecraft {
    version(minecraft_version)
    runs {   
        if (project.hasProperty('common_runs_enabled') ? project.findProperty('common_runs_enabled').toBoolean() : true) {
        
            server(project.hasProperty('common_server_run_name') ? project.findProperty('common_server_run_name') : 'vanilla_server') {
                workingDirectory(this.file("run"))
            }
            client(project.hasProperty('common_client_run_name') ? project.findProperty('common_client_run_name') : 'vanilla_client') {
                workingDirectory(this.file("run"))
            }
        }
    }
}
repositories {
    maven {
        url = 'https://maven.blamejared.com'
        name = 'BlameJared Maven'
    }
}

dependencies {
     compileOnly group:'org.spongepowered', name:'mixin', version:'0.8.5'
     implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
}

processResources {

    def buildProps = project.properties.clone()

    filesMatching(['pack.mcmeta']) {

        expand buildProps
    }
}

dependencies {
    compileOnly('com.blamejared.crafttweaker:CraftTweaker-common-1.18.2:9.1.108')
    annotationProcessor("com.blamejared.crafttweaker:Crafttweaker_Annotation_Processors-${minecraft_version}:${crafttweaker_ap_version}")
    annotationProcessor("com.blamejared.crafttweaker:CraftTweaker-common-${minecraft_version}:${crafttweaker_version}")
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}


task buildProject {
    buildProject.group("build")
    buildProject.finalizedBy project(":Forge").getTasksByName("build", true).stream().findAny().get()
    buildProject.finalizedBy project(":Fabric").getTasksByName("build", true).stream().findAny().get()
}